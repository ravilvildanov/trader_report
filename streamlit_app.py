import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import tempfile
import os
from decimal import Decimal
import logging
from src.trade_report_processor import TradeReportProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Freedom Calculator - –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(90deg, #f0f2f6, #e1e5e9);
        border-radius: 10px;
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #1f77b4;
    }
    .success-message {
        background: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #c3e6cb;
    }
    .warning-message {
        background: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #ffeaa7;
    }
    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #f5c6cb;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<div class="main-header">üìä Freedom Calculator</div>', unsafe_allow_html=True)
    st.markdown("### –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    with st.sidebar:
        st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–∫–µ—Ä—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        broker_file = st.file_uploader(
            "–ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç",
            type=['xlsx', 'pdf'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ PDF —Ñ–∞–π–ª —Å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–º –æ—Ç—á—ë—Ç–æ–º"
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        rates_file = st.file_uploader(
            "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë",
            type=['xlsx'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –æ—Ç –¶–ë"
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        previous_file = st.file_uploader(
            "–û—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            type=['xlsx', 'pdf'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç—á—ë—Ç–æ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∞–ª—å–¥–æ"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        currency = st.selectbox(
            "–í–∞–ª—é—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            ["USD", "EUR", "GBP"],
            index=0
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_button = st.button(
            "üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—á—ë—Ç—ã",
            type="primary",
            use_container_width=True
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        st.header("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.info("""
        **Freedom Calculator** - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤.
        
        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - –ó–∞–≥—Ä—É–∑–∫–∞ Excel –∏ PDF –æ—Ç—á—ë—Ç–æ–≤
        - –†–∞—Å—á—ë—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        - –ê–Ω–∞–ª–∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
        """)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    if process_button and broker_file and rates_file:
        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_path = Path(temp_dir)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                broker_path = temp_path / broker_file.name
                rates_path = temp_path / rates_file.name
                
                with open(broker_path, 'wb') as f:
                    f.write(broker_file.getvalue())
                
                with open(rates_path, 'wb') as f:
                    f.write(rates_file.getvalue())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                previous_path = None
                if previous_file:
                    previous_path = temp_path / previous_file.name
                    with open(previous_path, 'wb') as f:
                        f.write(previous_file.getvalue())
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç—ã
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–æ–≤..."):
                    processor = TradeReportProcessor(broker_path, rates_path)
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    processor.process()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                    negative_tickers = processor.negative_balance_handler.identify_negative_balance_tickers(processor.summary_df)
                    
                    if not negative_tickers.empty:
                        if previous_path:
                            st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
                            processor.handle_negative_positions(previous_path)
                        else:
                            st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥.")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    output_dir = temp_path / "output"
                    processor.save_reports(output_dir)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                display_results(processor, output_dir)
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
    
    elif process_button:
        if not broker_file:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç")
        if not rates_file:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    else:
        show_demo_content()

def display_results(processor, output_dir):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞", 
        "üí∞ –ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏", 
        "üìà –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫",
        "üìã –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã",
        "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"
    ])
    
    with tab1:
        st.header("–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º")
        
        if not processor.summary_df.empty:
            # –ú–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            total_tickers = len(processor.summary_df)
            positive_balance = len(processor.summary_df[processor.summary_df['–û—Å—Ç–∞—Ç–æ–∫'] > 0])
            negative_balance = len(processor.summary_df[processor.summary_df['–û—Å—Ç–∞—Ç–æ–∫'] < 0])
            zero_balance = len(processor.summary_df[processor.summary_df['–û—Å—Ç–∞—Ç–æ–∫'] == 0])
            
            with col1:
                st.metric("–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤", total_tickers)
            with col2:
                st.metric("–î–ª–∏–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", positive_balance)
            with col3:
                st.metric("–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏", negative_balance)
            with col4:
                st.metric("–ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏", zero_balance)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–≤–æ–¥–∫–∏
            st.dataframe(
                processor.summary_df,
                use_container_width=True,
                hide_index=True
            )
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    with tab2:
        st.header("–°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º")
        
        if not processor.closed_summary_df.empty:
            # –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if '–ò—Ç–æ–≥–æ' in processor.closed_summary_df['–¢–∏–∫–µ—Ä'].values:
                total_row = processor.closed_summary_df[processor.closed_summary_df['–¢–∏–∫–µ—Ä'] == '–ò—Ç–æ–≥–æ'].iloc[0]
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫", f"{total_row['–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫']:,.2f} ‚ÇΩ")
                with col2:
                    st.metric("–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂", f"{total_row['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂']:,.2f} ‚ÇΩ")
                with col3:
                    st.metric("–ö–æ–º–∏—Å—Å–∏–∏", f"{total_row['–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π']:,.2f} ‚ÇΩ")
                with col4:
                    result = total_row['–ò—Ç–æ–≥']
                    color = "normal" if result >= 0 else "inverse"
                    st.metric("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", f"{result:,.2f} ‚ÇΩ", delta=f"{result:,.2f}")
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            closed_data = processor.closed_summary_df[processor.closed_summary_df['–¢–∏–∫–µ—Ä'] != '–ò—Ç–æ–≥–æ']
            if not closed_data.empty:
                st.subheader("–î–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º")
                st.dataframe(
                    closed_data,
                    use_container_width=True,
                    hide_index=True
                )
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            if not closed_data.empty:
                fig = px.bar(
                    closed_data,
                    x='–¢–∏–∫–µ—Ä',
                    y='–ò—Ç–æ–≥',
                    title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º",
                    color='–ò—Ç–æ–≥',
                    color_continuous_scale=['red', 'green']
                )
                fig.update_layout(
                    xaxis_title="–¢–∏–∫–µ—Ä",
                    yaxis_title="–†–µ–∑—É–ª—å—Ç–∞—Ç (‚ÇΩ)",
                    height=500
                )
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö")
    
    with tab3:
        st.header("–î–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫")
        
        if not processor.processed_df.empty:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2, col3 = st.columns(3)
            
            with col1:
                ticker_filter = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–∫–µ—Ä—É",
                    ["–í—Å–µ"] + sorted(processor.processed_df['–¢–∏–∫–µ—Ä'].unique().tolist())
                )
            
            with col2:
                operation_filter = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    ["–í—Å–µ"] + sorted(processor.processed_df['–û–ø–µ—Ä–∞—Ü–∏—è'].unique().tolist())
                )
            
            with col3:
                date_range = st.date_input(
                    "–ü–µ—Ä–∏–æ–¥",
                    value=(
                        processor.processed_df['–†–∞—Å—á–µ—Ç—ã'].min().date(),
                        processor.processed_df['–†–∞—Å—á–µ—Ç—ã'].max().date()
                    )
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_data = processor.processed_df.copy()
            
            if ticker_filter != "–í—Å–µ":
                filtered_data = filtered_data[filtered_data['–¢–∏–∫–µ—Ä'] == ticker_filter]
            
            if operation_filter != "–í—Å–µ":
                filtered_data = filtered_data[filtered_data['–û–ø–µ—Ä–∞—Ü–∏—è'] == operation_filter]
            
            if len(date_range) == 2:
                start_date, end_date = date_range
                filtered_data = filtered_data[
                    (filtered_data['–†–∞—Å—á–µ—Ç—ã'].dt.date >= start_date) &
                    (filtered_data['–†–∞—Å—á–µ—Ç—ã'].dt.date <= end_date)
                ]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            st.dataframe(
                filtered_data,
                use_container_width=True,
                hide_index=True
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            if not filtered_data.empty:
                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    total_trades = len(filtered_data)
                    st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
                
                with col2:
                    total_volume = filtered_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                    st.metric("–û–±—â–∏–π –æ–±—ä—ë–º", f"{total_volume:,}")
                
                with col3:
                    total_amount = filtered_data['–°—É–º–º–∞ –≤ —Ä—É–±'].sum()
                    st.metric("–û–±—â–∞—è —Å—É–º–º–∞", f"{total_amount:,.2f} ‚ÇΩ")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")
    
    with tab4:
        st.header("–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã")
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if (output_dir / 'details.csv').exists():
                with open(output_dir / 'details.csv', 'r', encoding='utf-8') as f:
                    csv_data = f.read()
                st.download_button(
                    label="üìä –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫ (CSV)",
                    data=csv_data,
                    file_name="details.csv",
                    mime="text/csv"
                )
        
        with col2:
            if (output_dir / 'summary.csv').exists():
                with open(output_dir / 'summary.csv', 'r', encoding='utf-8') as f:
                    csv_data = f.read()
                st.download_button(
                    label="üìã –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ (CSV)",
                    data=csv_data,
                    file_name="summary.csv",
                    mime="text/csv"
                )
        
        with col3:
            if (output_dir / 'closed_summary.csv').exists():
                with open(output_dir / 'closed_summary.csv', 'r', encoding='utf-8') as f:
                    csv_data = f.read()
                st.download_button(
                    label="üí∞ –ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (CSV)",
                    data=csv_data,
                    file_name="closed_summary.csv",
                    mime="text/csv"
                )
        
        with col4:
            if (output_dir / 'closed_report.pdf').exists():
                with open(output_dir / 'closed_report.pdf', 'rb') as f:
                    pdf_data = f.read()
                st.download_button(
                    label="üìÑ PDF –æ—Ç—á—ë—Ç",
                    data=pdf_data,
                    file_name="closed_report.pdf",
                    mime="application/pdf"
                )
    
    with tab5:
        st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        if not processor.processed_df.empty:
            # –ì—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            fig1 = px.scatter(
                processor.processed_df,
                x='–†–∞—Å—á–µ—Ç—ã',
                y='–°—É–º–º–∞ –≤ —Ä—É–±',
                color='–û–ø–µ—Ä–∞—Ü–∏—è',
                hover_data=['–¢–∏–∫–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞'],
                title="–°–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
            )
            fig1.update_layout(height=500)
            st.plotly_chart(fig1, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            ticker_counts = processor.processed_df['–¢–∏–∫–µ—Ä'].value_counts().head(20)
            fig2 = px.bar(
                x=ticker_counts.index,
                y=ticker_counts.values,
                title="–¢–æ–ø-20 —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫"
            )
            fig2.update_layout(
                xaxis_title="–¢–∏–∫–µ—Ä",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫",
                height=400
                )
            st.plotly_chart(fig2, use_container_width=True)
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
            operation_counts = processor.processed_df['–û–ø–µ—Ä–∞—Ü–∏—è'].value_counts()
            fig3 = px.pie(
                values=operation_counts.values,
                names=operation_counts.index,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π"
            )
            fig3.update_layout(height=400)
            st.plotly_chart(fig3, use_container_width=True)

def show_demo_content():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    st.markdown("""
    ## üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Freedom Calculator!
    
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º —Ç–æ—Ä–≥–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º.
    
    ### üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç** - Excel –∏–ª–∏ PDF —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
    2. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç** - Excel —Ñ–∞–π–ª —Å –∫—É—Ä—Å–∞–º–∏ –¶–ë
    3. **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ** - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
    4. **–ù–∞–∂–º–∏—Ç–µ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—á—ë—Ç—ã"** –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    ### ‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Å–¥–µ–ª–æ–∫
    - üí∞ –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    - üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≥—Ä–∞—Ñ–∏–∫–∏
    - üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –∏ PDF —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    - üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    
    ### üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - **–ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π –æ—Ç—á—ë—Ç**: Excel (.xlsx), PDF (.pdf)
    - **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç**: Excel (.xlsx)
    - **–í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã**: CSV, PDF
    
    ---
    
    **–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –∑–∞–≥—Ä—É–∑–∏–≤ —Ñ–∞–π–ª—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞!** üéØ
    """)

if __name__ == "__main__":
    main()
